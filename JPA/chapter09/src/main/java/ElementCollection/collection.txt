값 타입을 하나 이상 저장하려면 컬렉션에 보관하고 @ElementCollection과 @CollectionTable 어노테이션을 사용하면 된다.




------ 제약 사항 --------

값 타입은 값이 변경되면 아예 다른 값이 되어 원본 데이터를 찾기 어렵다. 이런 문제로 JPA구현체들은 값 타입 컬렉션에 문제가 생기면  값 타입 컬렉션이 매핑된 테이블의 연관된 테이블을 삭제하고 현재 값 타입 컬렉션 객체에 있는 모든 값을 DB에 저장한다.

eg

Hibernate:
    delete
    from
        address_elementcollection
    where
        member_elementcollection_id=?
Hibernate:
    insert
    into
        address_elementcollection
        (member_elementcollection_id, city, street, zipcode)
    values
        (?, ?, ?, ?)
Hibernate:
    insert
    into
        address_elementcollection
        (member_elementcollection_id, city, street, zipcode)
    values
        (?, ?, ?, ?)
Hibernate:
    insert
    into
        address_elementcollection
        (member_elementcollection_id, city, street, zipcode)
    values
        (?, ?, ?, ?)

        와 같이 말이다. 그래서 값 컬렉션이 매핑된 테이블에 데이터가 많으면 그냥 값 타입 컬렉션 대신 일대다 관계를 고려하는 것이 좋다.



>> 정리

    1. ENTITY TYPE
        - 식별자(@Id)가 있다.
            > 엔티티 타입은 식별자가 있고 실별자로 구분할 수 있다.
        - 생명 주기가 있다.
            > 생성하고, 영속화하고, 소멸하는 생명 주기가 있다.
            (em.persist(), em.remove()로 영속화/ 비영속화한다.)
        - 공유할 수 있다.
            > 참조 값을 공유할 수 있다. 이것을 공유 참조라고 한다.
            > 예를 들어서 회원 엔티티가 있다면 다른 엔티티에서 얼마든지 회원 엔티티를 참조할 수 있다.

    2. 값 타입의 특징
        - 식별자가 없다.
        - 생명주기를 엔티티에 의존한다.
            > 스스로 생명주기를 가지지 않고 엔티티에 의존한다. 의존하는 엔티티를 제거하면 같이 제거된다.
        - 공유하지 않는 것이 안전하다.
            > 엔티티 타입과는 다르게 공유하지 않는 것이 안전하다. 대신에 값을 복사해서 사용해야한다.
            > 오직 하나의 주인만이 관리해야한다.
            > 불변 객체로 만드는 것이 안전하다.
