OSIV(Open Session In View) _ JPA가 아닌 하이버네이트에서 지원하는 용어
	> 요청이 들어오고 filter, Interceptor를 만나면 요청을 시작하고 반환할 때까지 이를 유지하는 방식의 트랜잭션을 OSIV라고 한다.
		
		 ! 문제점 !
		 요청 당 트랜잭션 방식의 OSIV는 프레젠테이션 계층이 엔티티를 변경할 수 있다는 점이다. 

		>
		 @Controller
		 class MemberController{
			 @RequestMapping("~")
			 public String viewMember(Long id, Model model) {
				 Member member = memberService.getMember();
				 member.setName("xxx") // 보안상 임시 수정

				model.addAttribute("member", member);
			 }
		}

		임시로 변경하고 싶은 것인데 트랜잭션이 있기 때문에 아예 DB에서 이름을 바꿔버린다.  이러한 문제점을 해결하고 싶으면 

			1. 엔티티를 읽기 전용으로 만들기
				- 엔티티를 직접 노출하는 대신에 읽기 전용 메소드만 제공하는 인터페이스를 프레젠테이션 계층에 제공하는 방법이다. (getter만 제공)

			2. 엔티티 래핑
				- 엔티티의 읽기 전용 메소드만 가지고 있는 엔티티르 감싼 객체를 만들고 이를 프레젠테이션 계층에 반환하는 방법이다. 
				
				> class MemberWrapper{
					private Member member;

					public MemberWrapper(member){
						this.member = member;
					}
					public String getName(){
						member.getName();
					}
				}

			3. DTO만 반환 : (가장 전통적인 방법)
				- 프레젠테이션 계층에 엔티티 대신에 단순 데이터만 전달하는 객체인 DTO를 생성해서 반환하는 것이다. 하지만 이 방법은 OSIV를 사용하는 장점을 살릴 수 없고 엔티티를 거의 복사한 듯한 DTO클래스를 하나 더 만들어야 한다. 
				
				> class MemberDTO{
					private String name;
					//GETTER,SETTER

					....
				}

					MemberDTO memberDTO = new MemberDTO();
					memberDTO.setName(memgber.getName());
					return memberDTO;
					
			

		♷ 요청 당 트랜잭션 방식의 OSIV는 이러한 문제점들로 거의 사용하지 않는다.

		스프링 OSIV : 비지니스 계층 트랜잭션
		spring-orm.jar는 다양한 OSIV클래스를 제공한다. 서블릿 필터에 적용할지 인터셉터에 적용할지에 따라 원하는 클래스를 선택하면 된다.

		hibernate OSIV 서블릿 필터 : org.springframework.orm.hibernate4.support.OpenSessionInViewFilter
		hibernate OSIV 인터셉터 : org.springframework.orm.hibernate4.support.OpenSessionInViewInterceptor

		JPA OEIV 서블릿 필터 :  org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter
		JPA OEIV 인터셉터 : org.springframework.orm.jpa.support.OpenEntityManagerViewInterceptor


		스프링 OSIV 분석 
			[	영속성		컨텍스트	생존		범위	]
		요청 ==> filter/Interceptor ==> controller ==> service ==> Repository
							   |
							   |  트랜잭션 유효 범위
			[	영속 상태, 수정 불가능 		][	영속상태, 수정 가능  ]
		 

		동작원리 : 클라이언트의 요처잉 들어오면 영속성 컨텍스트를 생성한다. 이떄 트랜잭션은 시작하지 않는다.
		서비스 계층에서 트랜잭션을 시작하면 영속성 컨텍스트에 트랜잭션을 시작한다. 비즈니스 로직을 실행하고 서비스 계층이 끝나면 트랜잭션을 커밋하면서 영속성 컨텍스트를 플러시한다.
		이때 트랜잭션만 종료하고 영속성 컨텍스트는 살려둔다. 

		
		정리하면
		1. 요청이 오면 영속성 컨텍스트를 필터나 인터셉터에서 생성한다. 트랜잭션은  X
		2. 서비스 계층에서 @Transactional로 트랜잭션을 시작할 때 1번에서 미리 생성해준 영속성 컨텍스트를 찾아서 트랜잭션을 시작한다.
		3. 서비스 계층이 끝나면 트랜잭션을 커밋하고 영속성 컨텍스트를 flush한다.
		4. 컨트롤러와 뷰까지 영속성 컨텍스트가 유지되므로 조회한 엔티티는 영속 상태이다.
		5. 서블릿 필터나, 인터셉터로 요청이 돌아오면 영속성 컨텍스트를 종료한다. 이때는 플러시가 없다. 


		+ 트랜잭션 없이 읽어들이기
			영속성 컨텍스트의 변경은 트랜잭션 안에서 이뤄져야한다.(javax.persistence.TransactionaRequiredException) 하지만 읽기의 경우에는 없어도 된다.

	
			정리하면 
				영속성 컨텍스트는 트랜잭션 범위 안에서 엔티티를 조회하고 수정할 수 있다.
				영속성 컨텍스트는 트랜잭션 범위 밖에서 엔티티르 조회만 할 수 있다. 이를 트랜잭션 없이 읽기(Nontransactional reads라고 한다.


	
	
		> 이를 적용해서 다시 보면
			 @Controller
		 class MemberController{
			 @RequestMapping("~")
			 public String viewMember(Long id, Model model) {
				 Member member = memberService.getMember();
				 member.setName("xxx") // 보안상 임시 수정

				model.addAttribute("member", member);
			 }
		}

			1. DB에 반영하려면 플러시를 해야하는데 트랜잭션은 서비스 계층이 끝나면서 이미 플러시했다. OSIV는 요청이 끝나면 영속성 컨텍스트만 종료하므로 (em.close()) 플러시가 되지 않는다.
			2. em.flush()를 강제로 호출해도 트랜잭션 범위 밖이므로 데이터 수정이 되지 않는다. 만약 억지로 하면 (javax.persistence.TransactionaRequiredException : no transaction is in progress) 가 난다.

		

		>>>>>>>>>>>>>
		주의할 점
		스프링 OSIV를 사용하면 프레젠테이션 계층에서 엔티티를 수정해도 수정 내용을 데이터베이스에 반영하지 않는다. 그러나 수정 후에 트랜잭션을 시작하는 서비스 계층을 호출하면 문제가 생긴다. 

		 @Controller
		 class MemberController{
			 @RequestMapping("~")
			 public String viewMember(Long id, Model model) {
				 Member member = memberService.getMember();
				 member.setName("xxx") // 보안상 임시 수정

				 memberService.biz();

				model.addAttribute("member", member);

				return "view"
			 }
		}

		class MemberService{
			@Transactional
			public void biz(){
				....
			}
		}

		biz()가 끝나면 트랜잭션AOP는 트랜잭션을 커밋하고 영속성 컨텍스트를 플러시한다. 그러면 이때 수정 사항이 DB에 반영된다. 
		즉, 비즈니스 로직을 다 호출 한 후 바꿔야 안정적으로 사용할 수 있다.


		-------------------------------------------------------------------------------------------


		[정리]  
			스프링 OSIV 특징

				1. OSIV는 클라이언트 요청이 들어올 때 영속성 컨텍스트를 생성해서 요청이 끝날 때까지 같은 영속성 컨텍스트를 유지한다. 따라서 한 번 조회한 엔티티는 요청이 끝날 때까지 영속 상태를 유지한다.
				2. 엔티티 수정은 트랜잭션이 있는 계층에서만 동작한다. 트랜잭션이 없는 프리젠테이션 계층은 지연 로딩을 포함해서 조회만 할 수 있다. 

			스프링 OSIV 단점

				1. OSIV를 적용하면 같은 영속성 컨텍스트를 여러 트랜잭션이 공유할 수 있다는 점에 유의해야한다. 특히 트랜잭션 롤백시 문제가 발생할 수 있다.
				2. 앞서 스프링 OSIV 주의사항에서 본 바와 같이 프레젠테이션 계층에서 엔티티를 수정하고 비즈니스 로직을 수행하면 엔티티가 수정될 수 있다.
				3. 프레젠테이션 계층에서 지연 로딩에 의한 SQL이 실행된다. 따라서 성능 튜닝 시에 확인해야할 부분이 넓다.

			OSIV VS FACADE VS DTO를

				OSIV를 사용하지 않으면 대안은  FACADE 계층이나 그것을 조금 변형해서 사용하는 방법이 있다. 그렇지만 결국 준영속 상태가 되기 전에 프록시를 강제 초기화해야한다.
				그 이외의 방법은 DTO를 만들어서 반환하는 것이다. 어떻든 중복되는 코드가 늘 가능성이 많다. 

			OSIV가 만능은 아니다.

				OSIV를 사용하면 엔티티를 유지하며 맘 껏 객체 그래프 탐색이 가능하지만, 복잡한 화면을 구성할 때는 효과적이지 않을 수 있다. 
				이때는 JPQL로 필요한 것만 조회해서 DTO로 만드는 것이 나은 해결책이 될 수도 있다.

		<!--
			[???OSIV는 같은 JVM을 벗어난 원격 상황에서 사용할 수 없다.] .. 이해가 안가는 부분

			내부 API, 외부 API부분.
		-->


			