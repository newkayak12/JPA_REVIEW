준영속 상태와 지연로딩

	지연로딩 시 문제가 생긴다. 트랜잭션처리가 Service에서 끝나기 때문에 지연로딩이 Service와 Repository에서는 유효하지만 컨트롤러나 뷰의 경우에는 준영속 상태로 돌입하여 

이는 컨트롤러, 뷰 계층에서 영속성을 이용한 작업을 할 수 없다는 것을 의미한다. 이는 지연 로딩을 컨트롤러, 뷰에서 사용하기 어렵다는 것을 의미한다.  이를 해결하는 방법은 두 가지가 있다.

	
		1. 	뷰가 필요한 엔티티를 미리 로딩해두는 방법
		
		2. 	OSIV를 사용해서 엔티티를 항상 영속 상태로 유지하는 방법
	

미리 로딩해두는 방법 (1)에는 어디서 미리 로딩하느냐에 따라서 3 가지 방법이 있다.

		1-1 글로벌 페치 전략 수정 > @ManyToMany(fetch = FetchType.EAGER) 
			문제점 :
				 1-1-1 사용하지 않는 엔티티를 로딩한다.
				 1-1-2 N+1문제가 발생한다. JPQL을 사용할 때 안에 있는 객체 수 + 내가 부른 객체 수만큼 쿼리를 던진다.

		1-2 JPQL 페치 조인 : (JPQL) select o from Order o join 'fetch' o.member;
			문제점 : 
				1-2-1 가장 현실적인 대안이지만 화면에 맞춘 레포지토리 메소드가 증가한다. (화면 A를 위해 a, 화면 B를 위해 b) > 이 둘을 합쳐서 적절하게 타협해야한다.

		1-3 강제로 초기화  : 영속성 컨텍스트가 살아있을 떄 프리젠테이션 계층이 필요한 엔티티를 강제로 초기화해서 반환하는 방법이다. (서비스에서 미리 초기화를 해버리고 이를 프레젠테이션 계층으로 올리는 것이다.) 
				하이버네이트를 사용하면 org.hibernate.Hibernate.initialize(order.getMember()) 와 같은 방법으로 프록시를 초기화할 수 있다.  (JPA에는 초기화 메소드가 없다. 초기화 여부만 확인할 수 있다. )

				>> 이는 프레젠테이션 계층이 서비스 계층을 침범하는 상황이 벌어진다. 이 프록시 초기화 역할을 분리해야한다. FACADE 계층이 이를 담당할 것이다. 


							|
	request ==> Filter/Interceptor ==> Controller ==>[FACADE] ==>Service ==> Repository
						        |    ⎿ ⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎦
					        준영속 <- | -> 영속	


				이렇게 되면 FACADE계층에서 트랜잭션을 시작해야한다. 
			

				FACADE 계층
				1. 프레젠테이션 계층과 도메인 모델 계층 간의 논리적 의존성을 분리해준다.
				2. 프레젠테이션 계층에서 필요한 프록시 객체를 초기화한다.
				3. 서비스 계층을 호출해서 비즈니스 로직을 실행한다. 
				4. 레포지토리를 직접 호출해서 요구하는 엔티티를 찾는다. 


		>>
			 class OrderFacade{
				 @Autowired OrderService orderService;

				 public Order findOrder(id){
					 Order order = orderService.findOrder(id);
					 order.getMember() //강제로 초기화
					
					return order;

				 }
			 }

			 class OrderService{
				 public Order findOrder(id){
					 return orderRepository.findOrder(id);
				 }
			 }

			 -------------- 그러나 오류 확률이 있다. 
			 			ㄴ 문제는 프레젠테이션 계층에서 준영속이기 때문이다.
						 	ㄴ 그럼 영속상태로 놓으면 되는 것 아니냐?
							 	ㄴOSIV