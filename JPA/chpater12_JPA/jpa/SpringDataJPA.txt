	JpaRepository를 상속 받는다. 
	/*
	 * ----------스프링 데이터 --------------
	 * 		<<interface>> repository
	 * 			
	 * 			[상속]
	 * 
	 * 		<<interface>> crudRepository
	 * 			
	 * 			[상속]
	 * 
	 * 		<<interface>> PagingAndSortingRepository
	 * 			
	 * 			[상속]
	 * 
	 * ------------스프링 JPA --------------
	 * 		<<interface>> JpaRepository
	 * 		
	 * 
	 *			save(s) : 새로운 엔티티를 저장하고 이미 있는 엔티티는 수정한다. ( 식별자 값이 없으면 새로운 엔티티로 판단해서 EntityManager.persist()를 식별자 값이 있으면 이미 있는 엔티티로 판단해서 EntityManger.merge()를 호출한다. )
	 			delete(T) : 엔티티 하나를 삭제한다  내부에서 EntityManager.remove()를 호출한다.
				findOne(ID) : 엔티티 하난를 조회한다. 내부에서 EntityManager.find()를 호출한다.
				getOne(Id) : 엔티티를 프록시로 조회한다. 내부에서 EntityManger.getReference()(PK만 가지고 있는 프록시 객체) 를 호출한다.
				findAll(...) : 모든 엔티티를 조회한다. 정렬이나 페이징 조건을 파라미터로 제공할 수 있다. 
	 * 
	 * 
	 */


	 
			쿼리 메소드 기능 
			>> 인터페이스에 메소드만 선언하면 해당 메소드의 이름으로 적절한 JPQL쿼리를 생성해서 실행한다.

			1. 메소드 이름으로 쿼리 생성
			2. 메소드 이름으로 JPA NamedQuery 호출
			3. @Query 어노테이션을 사용해서 리포지토리 인터페이스에 쿼리 직접 정의




			1. 메소드 이름으로 쿼리 생성
				이메일과 이름으로 회원을 조회하려면 다음과 같은 메소드를 정의하면 된다. 
				
				public interface MemberRepository extends Repository<Member, Long>{
					List<Member> findByEmailAndName(String email, String name)
				}

				이렇게 지정하면 JPA는 메소드 이름을 분석해서 JPQL을 생성하고 실행한다. 실행한  JPQL은
				
				select m from Member m where m.email = ?1 and m.name = ?2

				>> 물론! 정해진 규칙에 따라서 메소드 이름을 지어야 한다. 

				And > findByLastNameAndFirstName
				Or > findByLastNameOrFirstName
				is,Equal > findbyFirstname(findbyFirstnameIs) / findbyFirstnameEquals
				LessThan > findByAgeLessthan
				LessThanEqual > findByAgeLessThanEqual
				GreaterThan > findByAgeGreaterThan
				GreaterThanEqual > findByAgeGreaterThanEqual

				after > findByStartAfter
				before > findByStartBefore
				isNull > findByAgeIsNull
				isNotNull, NotNull > findByAge(is)NotNull
				Like > findByNameLike
				NotLike > findByNameNotLike
			
				StartingWith > findByNameStartingWith
				EndingWith > findByNameEndWith
				Containing > findByNameContaining
				OrderBy > findByAgeOrderByLastNameDesc

				Not > findByNameNot
				In > findByAgeIn(Collection ages)
				NotIN> findByAgeNotin(Collection ages)
				TRUE > findByActiveTrue()
				FALSE > findByActiveFalse()
				IgnoreCase > findByNameIgnoreCase


			2.JPA NameqQuery : 메소드 이름으로 JPA NamedQuery를 호출하는 기능을 제공한다.
				예를 들어
				
					@Entity
					@NamedQuery(
						name="Member.findByUserName",
						query="select m from Member m where m.userName = :userName"
					)
					public class Member{
						...
					}

				와 같이 되어 있다면 혹은 xml에서

					<named-query name="Member.findByUserName">
						<query>

						<![CDATA[

							select m 
							from Member m
							where m.userName = :userName

						]]>

						</query>
					</named-query>
					

					
				원래는 JPA에서

					em.createNamedQuery("Member.findByUserName", Member.class).setParameter("userName","parameter").getResultList();

				와 같이 해야 했는데, JPA로 nameQuery를 호출하면

					List<Member> findByUserName(@Param("userName") String userName);
				
				와 같이 설정하면 Named쿼리를 실행한다. 만약 Named쿼리가 없다면 위의 이름으로 1번의 쿼리 생성 전략을 사용한다. 


			3. @Query, 레포지토리 메소드에 쿼리 정의
				Repository 메소드에 직접 쿼리를 정의하려면 @org.springframework.data.jpa.repository.Query 어노테이션을 사용한다. 인터페이스에

					- JPQL -

					@Query("select m from Member m where m.username = ?1")
					Member findByUserName(String userName);

					- Native -

					@Query(value="SELECT * FORM MEMBER WHERE USERNAME = ?0", nativeQuery = true)
					Member findByUserName(String userName);


				파라미터는 
						1. 위치 기반	m.userName = ?1
						2. 이름 기반  	m.userNmae = :name
				으로 할 수 있다. 


				
				
				3-1 벌크 수정 쿼리
				
					JPA에서 
					
						em.createQuery("update product p set p.price = p.price * 1.1 where p.stockAmount< :stockAmount").setParameter("stockAmount", stockAmount).executeUpdate();

					가 SPRING DATA에서는

						@Modifying(clearAutomatically = true [벌크성 쿼리를 실행하고 나서 영속성 컨텍스트를 초기화하고 싶으면])
						@Query("update Product p set p.price = p.price*1.1 where p.stockAmount < :stockAmount")
						int bulkPriceUp(@Param("stockAmount") String StockAmount);
						
					와 같이 사용할 수 있다.
					
				
				
				3-2 반환 타입
					
					스프링 데이터에서 JPA는 유연한 반환 타입을 지원한다. 결과가 한 건 이상이면 컬렉션을 그게 아니면 반환 타입을 지정한다.
					조회 결과가 없으면 단건은 NULL, 여러 개일 떄 단건은 javax.persistence.NonUniqueResultException이 난다.
					단건은 참고로 JPQL의 Query.getSingleResult()를 호출한다.

					단건이 NULL 이유는 javax.persistence.NoResultException을 무시하고 null을 반환하도록 스프링에서 지정했기 떄문이다. 
				
				3-3 페이징

					스프링 데이터에서 JPA는 퀄히 메소드에 페이징과 정렬 기능을 사용할 수 있도록 2가지 메소드를 만들어 놨다.
					
					1. org.springframework.data.domin.Sort : 정렬 (반환 값은 Page or List)
					2. org.springframework.data.domin.Pageable : 페이징 (내부에 sort 포함)

						
						count 쿼리를 사용할 때
					Page<Member> findByName(String name, Pageable pageable);

						count 쿼리를 사용하지 않을 때
					List<Member> findByName(String name, Pageable pageable);

						sort
					List<Member> findByName(String name, Sort sort);



				>>  조건을 넣어서 해보면
				 A. '김'으로 이름이 시작하는 회원
				 B. 이름으로 내림차순
				 C. 첫 번째 페이지 ~ 페이지 당 10건

					PageRequest pageRequest = new PageRequest( 0, 10, new Sort( Direction.DESC, "name" ) );

					Page<Member> result = memberRepository.findByNameStartingWith("김", pageRequest)';

					List<Member> members = result.getContent(); //조회된 데이터
					int totalPages = result.getTotalPages(); //전체 페이지 수
					boolean hasNextPage = result.hasNextPage(); //다음 페이지 존재 여부 

				PageRequest(offset, limit, sort) 순으로 진행된다. 

				Page 인터페이스 
					int getNumber() 		//현재 페이지
					int getSize() 			//페이지 크기
					int getTotalPages()		//전체 페이지 수
					long getNumberOfElements() 	//현재 페이지에 나올 데이터 수

					boolean hasPreviousPage()	//이전 페이지 여부
					boolean isFirstPage()		//현재 페이지가 첫 페이지 인지 여부 
					boolean hasNextPage()		//다음 페이지 여부
					boolean isLastPage()		//현재 페이지가 마지막 페이지 인지 여부 

					Pageable nextPageable()		//다음 페이지 객체, 다음 페이지가 없으면 null
					Pageable previousPageable()	//이전 페이지 객체, 이전 페이지가 없으면 null
					List<T> getContent()		//조회된 데이터
					boolean hasContent()		//조회된 데이터 존재 여부
					Sort getSort()			//정렬 정보
					

				 3-4 사용자 정의 레포지토리 구현

				 	A.Custom 기능을 정의한 interface > 이를 구현한 클래스  :::::::::: 주로 QueryDSL을 사용할 에정
 					B.JpaRepository<엔티티,PK>  ::::::: 기본 CRUD 작업할 예정
					C. A+B를 둘 다 받을 인터페이스

					결국 C에 접근해서 우리는 repository를 사용함

					단! A와 B의 메소드가 겹치면 안되는데, 특히 crudRepository와 메소드가 겹칠 우려가 있음 조심 !

				3-5 WEB 확장
					@EnableSpringDataWebSupport : 스프링 데이터가 제공하는 web확장 기능
						1. 도메인 클래스 컨버터 : 컨트롤러로 HTTP요청이 넘어올 떄 회원의 ID를 보내면 원래는 수동으로 ID를 기준으로 해당 객체를 찾아야 했지만 도메인 클래스 컨버터가 객체로 변환해서 넘겨준다. 
									도메인 클래스 컨버터를 통해 넘어온 회원 엔티티는 수정해도 DB에 반영되지 않는다.
										OSIV를 사용하지 않으면 : 조회한 엔티티는 준영속 상태이다. (수정하려면 merge를 사용해야한다.)
										OSIV를 사용하면 : 조회한 영속상태이다.  (OSIV 특성상 컨트롤러와 view에서는 영속성 컨텍스트를 플러시하지 않는다. 따라서 수정한 내용을 DB에 반영하지 않는다.
												만약 DB에 반영하고 싶으면 트랜잭션을 시작하는 서비스 계층을 호출해야한다. 서비스 계층이 종료되면 플러시와 트랜잭션 커밋이 일어나서
												영속성 컨텍스트의 변경 내용을 DB에 저장한다.)
						
						2. 페이징과 정렬 기능 : HandlerMethodArgumentResolver를 제공한다.  파라미터로 Pageable을 받으면 
								page(기본 0 / 현재 페이지), size(기본 20 / 한 페이지에 노출할 데이터 건수), sort(정렬 조건)과 같은 파라미터로 넘겼을 떄 이와 관련된 pagealbe을 만들어준다.

								- 두 개 이상이라면 접두사로 구분할 수 있는데 @Qualifer로 할 수 있다. 
									> @Qualifer("member") Pageable memberPageable, @Qualifer("order") Pageable orderPageable 같이 말이다. 

								- 기본 값을 바꾸고 싶으면 @PageableDefault를 사용하면 된다. 
								public String list(@PageableDefault(size = 12, sort = "name", direction = Sort.Direction.DESC) Pageable pageable)
									

				 