JPQL

    1. JPQL은 객체지향 쿼리 언어이다. 따라서 테이블을 대상으로 쿼리하는 것이 아니라 엔티티 객체를 대상으로 쿼리한다.
    2. JPQL은 SQL을 추상화해서 특정 데이터베이스 SQL에 의존하지 않는다.
    3. JPQL은 결국 SQL로 변환된다.

    특징
    1. 대소문자 구분
        엔티티와 속성은 대소문자를 구분한다. 예를들어 Member, username은 대소문자를 구분한다. 반면에 SELECT, FROM, AS와 같은 JPQL키워드는 대소문자를 구분하지 않는다.
    2. 엔티티 이름
        JPQL에서 사용한 Member는 클래스명이 아닌 엔티티 이름이다. 엔티티 이름은 @Entity의 name 속성으로 지정할 수 있다. 지정하지 않으면 클래스명과 같아진다.
    3. 별칭이 필요하다.
        JPQL에서는 별칭을 무조건 사용해야한다.

    구현 하기 위해서는  TypeQuery와 Query가 있는데 TypqQuery는 반환 타입이 명확해야 사용가능하고 Query는 그게 아니더라도 사용 가능하다.

    EX)
        TypedQuery<T> t = em.createQuery("SELECT t FROM T t ", T.class);
            반환 타입이 T라는 엔티티이므로 조회 대상 타입이 명확하다.

        Query query = em.createQuery("SELECT t.userName, t.age from T t");
            String, Integer등 조회 대상 타입이 명확하지 않기 때문에 query객체를 사용한다.
            반환 대상이 여러 개라면 Object[]로 반환하고 그게 아니라면 Object를 반환한다.


        query.getResultList() : 결과를 컬렉션으로 반환한다.
        query.getSingleResult : 결과가 하나일 떄 사용한다.
                > 결과가 없으면 javax.persistence.NoResultException
                > 결과가 1개보다 많으면 javax.persistence.NonUniqueResultException


    매개변수 바인딩
        매개변수를 이름으로 구분하는 방법이다. 이름 기준 파라미터는 앞에 ':'를 사용한다.
        ex)
            TypedQuery<T> t = em.createQuery("select t from T t where t.name = :userName", T.class);
            query.setParameter("userName","user1");
            List<T> tList = query.getResultList();

        혹은 위치 기반으로도 바인딩할 수 있다.
        List<T> t = em.createQuery("select t from T t where t.userName= ?1", T.class).setParameter(1,userNameParam).getResultList();

