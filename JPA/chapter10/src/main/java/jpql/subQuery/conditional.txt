조건식
1. 타입
문자 : '' 만약 '를 표현하고 싶으면 다른 이스케이핑 문자 없이 ''로 연속해서 사용하면 된다.
숫자 : L(Long),  D(Double), F(Float)으로 타입 지정 : 10L, 10D, 10F
날짜 : DATE{d `yyyy-mm-dd`}, TIME{t'hh-mm-ss'}, DATETIME{ts 'yyyy-mm-dd hh:mm:ss.f'} : {d '2012-03-24'}/{t '10-11-11'}/{ts'2021-03=24 10:11:11.123'}
참거짓 : TRUE, FALSE
열거형 : 패키지명을 포함한 전체 이름을 사용해야한다.
엔티티 타입 : 엔티티 타입을 표현한다 주로 상속과 관련해서 사용한다.


2. 연산자 우선 순위
2-1 논리연산
    AND : 둘 다 만족하면 참
    OR : 둘 중 하나만 만족해도 참
    NOT : 조건ㅅ기 결과 반대
2-2 비교식
    =, >, >=, <, <=, <>

3. BETWEEN, IN, LIKE, NULL 비교
3-1 Between : X가 A와 B사이에 있으면 참
    > SELECT m FROM Member m WHERE m.age BETWEEN 10 and 20;

3-2 IN : x와같은 값이 하나라도 있으면 참
    > SELECT m FROM Member m WHERE m.username IN ('회원1', '회원2');

3-3 LIKE : 문자 표현식 [NOT] LIKE 패턴값 [ESCAPE 문자]
    >  문자표현식과 패턴 값을 비교
        > % : 한 글자 이상
        > _ : 한 글자

3-4 IS NULL : NULL인지 비교

4. 컬렉션 식
4-1 IS [NOT] EMPTY : 컬렉션이 비었으면 참
    > SELECT m FROM Member m WHERE m.orders is not empty;
    == SELECT m.* FROM MEMBER m WHERE EXISTS (SELECT o.id FROM Orders o WHERE m.id=o.member_id);
    (is null을 컬렉션에 사용 불가)

5. 컬렉션 멤버 식
5-1 {엔티티나 값} [NOT] MEMBER [OF] {컬렉션 값 연관 경로} : : 엔티티나 값이 컬렉션에 포함되어 있으면 참
    > SELECT t FROM Team t WHERE :MemberParam MEMBER OF t.members

6. 스칼라 식 : 숫자, 문자, 날짜, case, 엔티티타입 같은 가장 기본적인 타입
6-1 수학식
    - +, - 단항 연산자
    - *,/,+,- 사칙 연산자

6-2 문자 함수
    - CONCAT(문자, 문자) : 문자를 합친다 : CONCAT('A','B') = AB
    - SUBSTRING(문자, 위치, [길이]) : 위치부터 시작해 길이만큼 문자를 구한다. 길이 값이 없으면 끝까지 구한다. : SUBSTRING('ABCDEF', 2, 3) = BCD
    - TRIM([[LEADING | TRAILING | BOTH] [트림 문자] FROM] 문자) : LEADING 왼쪽만
                                                               TRAILING : 오른쪽만
                                                               BOTH : 양쪽 다
                                                                            트림문자를 제거한다. 기본값은 BOTH 트림문자의 기본값은 공백이다. : TRIM(' ABC ') = ABC
    - LOWER(문자) : 소문자로 변경
    - UUPPER(문자) : 대문자로 변경
    - LENGTH(문자) : 문자 길이
    - LOCATE(찾을 문자, 원본 문자, [검색 위치]) : 검색위치부터 문자를 검색한다. 1부터 시작, 못 찾으면 0 반환 : LOCATE('DE', 'ABCDEFG') = 4

6-3 수학 함수
    - ABS : 절대값 : ABS(-10) = 10
    - SQRT : 제곱근을 구한다. : SQRT(4) = 2.0
    - MOD(수학식, 나눌 수 ) : 나머지를 구한다. : MOD(4,3) = 1
    - SIZE(컬렉션 값 연관 경로식) : 컬렉션의 크기를 구한다. : SIZE(t.members)
    - INDEX(별칭) LIST 타입 컬렉션의 위치값을 구한다. 단, 컬렉션이 @OderColumn을 사용하는 LIST 타입일 때만 사용할 수 있다. : t.members m where INDEX(m)>3

6-4 날짜 함수 : 데이터 베이스의 현재 시간을 조회한다.
    - CURRENT_DATE : 현재 날짜
    - CURRENT_TIME : 현재 시간
    - CURRENT_TIEMSTMAP : 현재 날짜 시간

    > SELECT CURRENT_DATE, CURRENT_TIME, CURRENT_TIMESTAMP FROM Team t;

    하이버네이트는 년, 월, 일, 시, 분, 초를 구할 수 있다.
    > SELECT year(CURRENT_TIMESTAMP), month(CURRENT_TIMESTAMP), day(CURRENT_TIMESTAMP) from Member;

6-5 CASE 식 : 특정 조건에 따라 분기할 때 CASE식을 사용한다. 총 4가지 종류가 있다.
    1. 기본 CASE
                CASE
                    {WHEN <조건식> THEN <스칼라식>} +
                    ELSE <스칼라식>
                END

                >>
                SELECT
                    CASE WHEN m.age <= 10 then '학생요금'
                         WHEN m.age >= 60 then '경로요금'
                         ELSE '일반요금'
                    END
                FROM Member m



    2. 심플 CASE
                CASE <조건 대상>
                    WHEN <스칼라식 1> THEN <스칼라식 2>
                    ELSE <스칼라식>
                END

                >>
                SELECT
                    CASE t.name
                          WHEN '팀A' THEN '인센티브110%'
                          WHEN '팀B' THEN '인센티브120%'
                          ELSE '인센티브105%'
                    END
                FROM Team t



    3. COALESCE : 스칼라식을 차례대로 조회해서 null이 아니면 반환한다.
                COALESCE (<스칼라식> {,<스칼라식>}+)

                >>
                SELECT COALESCE(m.userName, '이름 없는 회원') FROM Member m;





    4. NULLIF : 두 값이 같으면 null을 반환하고 다르면 첫 번째 값을 반환한다. (집합함수는 null을 포함하지 않으므로 보통 집합 함수와 합께 사용한다.)
                NULLIF(<스칼라식>, <스칼라식>)

               >>
               SELECT NULLIF(m.username, '관리자') FROM Member m






