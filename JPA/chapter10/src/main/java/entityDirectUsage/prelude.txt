Primary Key
객체 인스턴스는 참조 값으로 식별하고 테이블 로우는 기본 키 값으로 식별한다.
따라서 JPQL에서 엔티티 객체를 직접 사용하면 SQL에서는 엔티티의 기본 키 값을 이용한다.

>  SELECT COUNT(m) FROM Member m
>> SELECT COUNT(m.id) FROM Member m;

Foreign Key
같은 결과를 위해서
> SELECT m FROM Member m WHERE m.team = :team;을 쓸 수도 있지만
> SELECT m FROM  Member m where m.team.id = :team으로 식별자 값을 직접 사용할 수도 있다.



Named쿼리 (정적 쿼리)
JPQL은 정적/ 동적으로 나눌 수 있다.
 - 동적 쿼리 : em.createQuery("select")처럼 JPQL을 문자로 완성해서 직접 넘기는 것을 동적쿼리라고 한다. 런타임에 특정 조건에 따라 JPQL을 동적으로 구성할 수 있다.
 - 정적 쿼리 : 미리 정의한 쿼리에 이름을 부여해서 필요할 떄 사용할 수 있는데 이를 Named쿼리 라고 한다. 한 번 정의하면 변경할 수 없다.
            애플리케이션 로딩 시점에 JPQL이 문법을 체크하고 미리 파싱해둔다. 사용 시점에는 파싱된 결과를 재용하므로 성능상 이점도 있다. 또한 Named쿼리는 변하지 않는 정적 SQL이 생성되므로 DB의 조회 성능 최적화에도 도움이 된다.
            Named 쿼리는 @NamedQuery나 XML문서로 사용할 수 있다.