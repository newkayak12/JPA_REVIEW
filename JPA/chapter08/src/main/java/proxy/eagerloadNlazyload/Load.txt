    * JPA는 개발자가 연관된 엔티티의 조회 시점을 선택할 수 있도록 두 가지 방법을 제공한다.

        1. 즉시 로딩(eagerLoading) : 엔티티를 조회할 때 연관된 엔티티도 함께 조회한다.
                            ex) em.find(Member.class, "member1")를 호출할 때 회원 엔티티와 관련된 팀 엔티티도 함께 조회한다.
                                > 설정 방법 : @ManyToOne(fetch = FetchType.EAGER);
        2. 지연 로딩(lazyLoading) : 연관된 엔티티를 실제 사용하는 시점에 조회한다.
                            ex) member.getTeam().getName()처럼 조회한 팀 엔티티를 실제로 사용하는 시점에 엔티티를 조회한다.
                                > 설정 방법 : @ManyToOne(fetch = FetchType.LAZY);



    * JPA의 기본 Fetch 전략

        1. EAGER : @ManyToOne, @OneToOne : 연관된 엔티티가 하나면 즉시 로딩을
        2. LAZY : @OneToMany, @ManyToMany : 컬렉션이면 지연로딩을 사용한다.

    * 최적화 전략 : 모두 지연 로딩을 걸어 놓고 상황에 맞춰서 즉시 로딩을 거는 식으로 최적화를 하는 것이 낫다.

    * 컬렉션에서 FetchType.EAGER 사용 시 주의할 점
        1. 컬렉션을 하나 이상 즉시 로딩하는 것은 권장하지 않는다.
        2. 컬렉션 즉시로딩은 항상 OUTER JOIN을 사용한다.


    >> ManyToOne, OneToOne
     (optional = false ) : inner join
     (optional = true ) :  outer join

     >> @OneToMany,ManyToMany
     (optional = false ) : outer join
     (optional = true ) : outer join