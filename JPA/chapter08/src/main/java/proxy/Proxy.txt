EntityManager의 find메소드는 영속성 컨텍스트에 엔티티가 없으면 (캐싱이 안되어 있으면) DB를 조회한다.
이렇게 하면 사용하든 안하든 필요없는 엔티티도 DB에서 조회해온다.

그래서 조회를 미루는 방식으로 getReference()메소드를 사용한다.
이 메소드를 사용하면 JPA는 데이터베이스를 조회하지 ㅇ낳고 실제 엔티티 객체 역시 생성하지 않는다. 대신에 대이터베이스 접근을 위임한 프록시 객체가 반환된다.

이 프록시 객체는 실제 클래스를 상속 받으므로 실제 클래스와 겉모양이 같으며, 실제 객체와 구분없이 그냥 사용하면 된다.
(프록시는 실제 객체에 대한 참조를 보관한다.) >> 프록시 객체의 메소드를 호출하면 프록시 실체는 실제 객체의 메소드를 호출한다.

>> 프록시 객체의 초기화
프록시 객체는 실제 사용될 떄 DB를 조회해서 엔티티 객체를 생성하는데 이를 '프록시 객체의 초기화'라고 한다.

    1. 프록시 객체에 메소드를 호출해서 실제 데이터를 조회한다.
    2. 프록시 객체는 실제 엔티티가 생성되어 있지 않으면 영속성 컨텍스트에 실제 엔티티 생성을 요청하는데 이를 '초기화'라고 한다.
    3. 영속성 컨텍스트는 데이터베이스를 조회해서 실제 엔티티 객체를 생성한다.
    4. 프록시 객체는 생성된 실제 엔티티 객체의 참조를 멤버 변수로 보관한다.
    5. 프록시 객체는 실제 엔티티 객체의 메소드를 호출해서 결과를 반환한다.

>> 프록시의 특징

    1. 프록시 객체는 처음 사용할 때 한 번만 초기화된다.
    2. 프록시 객체를 초기화한다고 프록시 객체가 실제 엔티티로 바뀌는 것은 아니다. 단지 프록시 객체를 초기화시켜서 프록시를 통해서 실제 엔티티에 접근하는 것이다.
    3. 프록시 객체는 원본 엔티티를 '상속'받은 객체이므로 타입 체크시에 주의해야한다.
    4. 영속성 컨텍스트에 찾는 엔티티가 있으면 DB를 조회할 필요가 없으므로 em.getReference()를 호출해도 프록시가 아닌 실제 엔티티를 반환한다.
    5. 초기화는 영속성 컨텍스트의 도움을 받아야 가능하다. 따라서 영속성 컨텍스트의 도움을 받을 수 없는 준영속 상태의 프록시를 초기화하면 문제가 발생한다.

    >>ex)
    // MemberProxy 반환
        Member member = em.getReference(Member.class, "id1");
        transaction.commit();

        em.close;
    // 영속성 컨텍스트 종료

        member.getName()
    // 준영속 상태 초기화 시도로 org.hibernate.LazyInitializationException 발생
    <<