이전까지는 부모 - 자식 클래스를 모두 DB의 테이블과 매핑했다면 MappedSuperClass는 부모 클래스는 자식 클래스에 정보만 제공하고 자식 클래스만 DB의 테이블과 매핑하는 방식이다.

@MappedSuperClass는 일종의 추상 클래스와 비슷한데, @Entity는 실제 테이블과 매핑되지만 @MappedSuperClass는 실제 테이블과 매핑되지 않으며, 단순 상속을 목적으로 한다.

--Member--    ---Seller----
|   ID   |    |   ID      |
|  NAME  |    |  NAME     |     로 나뉘어진 테이블이
|  EMAIL |    |  ShopName |
----------    -------------


                -----BaseEntity-----
                |       ID         |
                |       NAME       |
                --------------------            와 같이 공통된 부분을 상속받고 다른 부분만 재구현하는 식으로 구성된다.
                                                             참고로 회원과 판매자는 서로 관계가 없는 테이블과 엔티티이다.
            --Member--          ---Seller----                       단순히 공통 속성을 부모 클래스로 모으고 객체 상속 관계로 만들어 놓은 것이다.
            |  EMAIL |          |  ShopName |
            ----------          -------------



            --------------------------

            부모로부터 물려 받은 매필 정보를 재정의 하려면 @AttributeOverrides나 @AttributeOverride를 사용하고
            연관관계를 재정의 하려면 @AssociationOverrides나 @AssociationOverride를 재정의한다.



            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            테이블과 매핑되지 않고 자식 클래스에 엔티티의 매핑정보를 상속하기 위해서 사용한다.
                이는 @MappedSuperClass는 엔티티가 아니므로 JPQL에서 사용할 수 없음을 뜻한다.
                    직접 인스턴스화 할 일이 거의 없으므로 추상 클래스로 많이 만들어서 사용한다.

                    >>>>>>>>>>>>>>>>>>>>>>>>>>>> 단순히 매핑 정보를 모아주는 역할을 한다.
                    >> 등록일자, 수정일자, 등록자, 수정자 등과 같은 공통된 부분을 효과적으로 관리할 수 있다.
