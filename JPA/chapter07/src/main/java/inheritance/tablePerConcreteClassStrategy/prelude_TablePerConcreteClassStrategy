자식 엔티티마다 테이블을 만든다. 그리고 자식 테이블 각가에 필요한 컬럼이 모두 있다.
(서브 타입 중심으로 통합)
------ALBUM------       ------MOVIE------       ------ALBUM------
|   ITEM_ID(PK) |       |   ITEM_ID(PK) |       |   ITEM_ID(PK) |
|   NAME        |       |   NAME        |       |   NAME        |
|   PRICE       |       |   PRICE       |       |   PRICE       |
|   ARTIST      |       |   DIRECTOR    |       |   AUTHOR      |
-----------------       |   ACTOR       |       |   ISBN        |
                        -----------------       -----------------


InheritanceType.TALBE_PER_CLASS를 선택하면 자식 엔티티마다 테이블을 만든다.

    1. 장점
        - 서브 타입을 구분해서 처리할 떄 효과넞기앋.
        - not null 제약 조건을 사용할 수 있다.
    2. 단점
        - 여러 자식 테이블을 함께 조회할 때 성능이 느리다. (SQL의 UNION을 사용해야한다.) >>>  JOIN은 할 수 없으므로 합집합을 반환하는 UNION을 사용해야한다.
        - 자식 테이블을 통합해서 쿼리하기 어렵다. (이미 테이블이 세 가지로 나뉘었기 떄문이다.) >> 혹시 VIEW를 사용하면 그나마 보완할 수 있지 않나는 싶다.
    3. 특징
        - 구분 컬럼을 사용하지 않는다. (이미 테이블이 나뉘어 있다. )


-------------->> DB관점, Object 관점 둘 다 별로인 전략